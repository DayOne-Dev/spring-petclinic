node {
    JF_RT_URL="https://psazuse.jfrog.io"
    JFROG_NAME="psazuse"
    
    // https://github.com/krishnamanchikalapudi/spring-petclinic
    // https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli
    JKS_BUILD_NAME="spring-petclinic" 
    JKS_BUILD_ID="jks.mvn.xray.${env.BUILD_ID}"
    RT_REPO_MVN_VIRTUAL="krishnam-mvn-virtual"

    JF_CLI_LOG_LEVEL='DEBUG'
    JFROG_CLI_OUTPUT_DIR="${WORKSPACE}/cli/"

    def BUILD_TS = sh(script: "date +%Y-%m-%d-%H-%M", returnStdout: true).trim()

    stage('PACKAGE') { 
        stage('init') {
             stage('jf.ver') {
                sh """ #!/bin/bash
                    jf -v
                    java -version
                    mvn -v
                """ 
            } // stage: jf.ver
            stage('jf.vars') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    export JFROG_CLI_COMMAND_SUMMARY_OUTPUT_DIR="${JFROG_CLI_OUTPUT_DIR}"
                """ 
            } // stage: jf.ver
            stage('rt.config') {
                // jenkins secrets: https://www.jenkins.io/doc/book/using/using-credentials/
                // JFrog CLI config
                withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY_CLI', passwordVariable: 'JFROG_RT_PWD', usernameVariable: 'JFROG_RT_USER')]) {
                    sh """ #!/bin/bash
                        jf config add ${JFROG_NAME} --artifactory-url=${JF_RT_URL}/artifactory --xray-url=${JF_RT_URL}/xray --user=${JFROG_RT_USER} --password=${JFROG_RT_PWD} --interactive=false --overwrite    
                    """
                } // withCredentials: JFROG_ARTIFACTORY
            } // stage: rt.config
            stage('rt.ping') {
                sh """ #!/bin/bash
                    jf rt ping
                """
            } // stage: rt.ping
            stage('config.show') {
                sh """ #!/bin/bash
                    jf config show
                """
            } // stage: config.show
        } // stage: init
        stage('Code') {
            stage('clone') {
                git branch: 'main', url: 'https://github.com/krishnamanchikalapudi/spring-petclinic.git'
            } // stage: clone
            stage('mvnc') {
                repoPath="krishnam-mvn"
                sh """ #!/bin/bash                     
                    jf mvnc --global --repo-resolve-releases ${RT_REPO_MVN_VIRTUAL} --repo-resolve-snapshots ${RT_REPO_MVN_VIRTUAL} 
                """
            } // stage: mvnc
            stage('audit') {
                sh """ #!/bin/bash
                    jf audit --mvn --extended-table=true
                """
            }
            stage('compile') {
                sh """ #!/bin/bash
                    jf mvn clean install -DskipTests=true --build-name=${JKS_BUILD_NAME} --build-number=${JKS_BUILD_ID} --detailed-summary=true 
                """
            } // stage: compile
            stage('scan') {
                sh """ #!/bin/bash
                    jf scan . --extended-table=true --format=simple-json
                """
            }
        } // stage: code
    } // stage: package
    stage('BUILD INFO') {
      // Executive Order: 
      //        https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/
      //        https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity
      //  US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
      //  US Cyber Defence Agency: https://www.cisa.gov/sbom
      //  NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
        stage('collect env') {
            sh """ #!/bin/bash
                jf rt bce ${JKS_BUILD_NAME} ${JKS_BUILD_ID} 
            """
        } // stage: collect env
        stage('vcs info') {
            sh """ #!/bin/bash
                  jf rt bag ${JKS_BUILD_NAME} ${JKS_BUILD_ID} 
            """
        } // stage: vcs info
        stage('build publish') {
            sh """ #!/bin/bash
                jf rt bp ${JKS_BUILD_NAME} ${JKS_BUILD_ID} --detailed-summary=true
            """
        } // stage: build publish
        stage('build scan') {
            try {
                sh """ #!/bin/bash
                    jf bs ${JKS_BUILD_NAME} ${JKS_BUILD_ID} --rescan=true  --extended-table=true --vuln=true --fail=false
                """
            } catch (err) {
            } // TRY-CATCH
        } // stage: build scan
    } // stage: Build Info
} // node
