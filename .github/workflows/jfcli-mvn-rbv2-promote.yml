# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: JF-CLI with Maven package for RBv2
on:
# TURN-OFF on every push 
  push:
    branches: 
      - nobuildonpush
    #  - main
    paths-ignore: # When the below folders are checked-in, the GitHub Actions job will not start.
    #  - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  mvnRbv2:
    if: ${{ github.event.comment.body == 'mvn-rbv2' ||  github.event.comment.body == 'mvn' ||  github.event.comment.body == 'rbv2' ||  github.event.comment.body == 'promote' || github.event.comment.body == 'all' }}
    name: MVN and RBv2 promote
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      RBv2_SIGNING_KEY: ${{ vars.RBV2_SIGNING_KEY }}
      RT_REPO_MVN_VIRTUAL: 'krishnam-mvn-virtual'
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: ${{vars.JFROG_CLI_LOG_LEVEL}} # DEBUG, INFO, WARN, ERROR
      BUILD_NAME: 'spring-petclinic'
      BUILD_ID: "ga-mvn-${{ github.run_number }}" # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_MVN_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_MVN_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Software version
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: Config jf with mvn repos
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}
          export JFROG_CLI_LOG_TIMESTAMP=DATE_AND_TIME

          jf mvnc --global --repo-resolve-releases ${{ env.RT_REPO_MVN_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_REPO_MVN_VIRTUAL}}

      - name: list folder
        run: |
          pwd
          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic

          echo "OIDC_PROVIDER_NAME = ${{ vars.JF_OIDC_PROVIDER_NAME }}"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
          echo "GITHUB_SHA = $GITHUB_SHA"
          echo "GITHUB_REPOSITORY_ID = $GITHUB_REPOSITORY_ID"

          cd /home/runner/work/spring-petclinic/spring-petclinic

      - name: prestep-summary
        run: |
          jfcliv=`jf --version`
          echo "# :frog: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [${jfcliv}](https://jfrog.com/getcli/) and Java [${{ env.JAVA_PROVIDER }}](https://github.com/actions/setup-java) v${{ env.JAVA_VERSION }} " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
# Package
      - name: Create Build
        run: |
          jf mvn clean install -DskipTests=true --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} --detailed-summary=true 

      - name: build publish env vars   # These properties were captured in Builds >> spring-petclinic >> version >> Environment tab
        run: |
          export e_env="e_demo" e_org="e_ps" e_team="e_arch" e_build="maven" e_job="github-action" e_product="artifactory" e_features="package,buildinfo,rbv2"

 # Build Info
    # Executive Order: 
    #       https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/
    #       https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity
    # US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
    # US Cyber Defence Agency: https://www.cisa.gov/sbom
    # NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
      - name: Collect env
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: Add VCS info
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: Build Publish
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true

# Set properties      
      - name: Set properties # These properties were captured Artifacts >> repo path 'spring-petclinic.---.jar' >> Properties
        run: |
          ts="cmd.$(date '+%Y-%m-%d-%H-%M')" 
          jf rt sp "job=github-action;env=demo;org=ps;team=arch;pack_cat=webapp;build=maven;product=artifactory;features=package,buildinfo,rbv2;ts=ts-${BUILD_ID}" --build="${{ env.BUILD_NAME}}/${{ env.BUILD_ID}}"

# Release Bundle v2
      - name: RBv2 spec - create
        run: |
          echo "{ \"files\": [ {\"build\": \"${{ env.BUILD_NAME}}/${{ env.BUILD_ID }}\" } ] }"  > RBv2-SPEC-${{ env.BUILD_ID }}.json
      - name: RBv2 spec - print
        run: | 
          cat RBv2-SPEC-${{ env.BUILD_ID }}.json
      - name: RBv2 Create NEW
        run: |
          jf rbc ${{ env.BUILD_NAME}} ${{ env.BUILD_ID }} --sync="true" --signing-key=${{env.RBv2_SIGNING_KEY}} --spec=RBv2-SPEC-${{ env.BUILD_ID }}.json
      - name: RBv2 promote DEV
        run: |
          jf rbp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID }} DEV --sync="true" --signing-key=${{env.RBv2_SIGNING_KEY}}  
     
      - name: rbv2-summary
        run: |
          echo "# :frog: Release Bundle v2 Summary :rocket: " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          # echo "<details><summary>The RBv2 artifacts has elevated to the subsequent stages</summary>" >> $GITHUB_STEP_SUMMARY
          echo "The Build Artifacts has elevated to the subsequent stages" >> $GITHUB_STEP_SUMMARY
          RB2_STATUS_RESP=$(curl -v -G ${JF_RT_URL}/lifecycle/api/v2/promotion/records/${BUILD_NAME}/${BUILD_ID}?async=false -H 'Content-Type:  application/json' -H "Authorization: Bearer ${{ steps.setup-cli.outputs.oidc-token }}")
          echo $RB2_STATUS_RESP > RBv2_STATUS-${{env.BUILD_ID}}.json
          cat RBv2_STATUS-${{env.BUILD_ID}}.json 
          # export RB2_STATUS=$(echo $RB2_STATUS_RESP | jq -r '.promotions[0].environment')
          items=$(echo "$RB2_STATUS_RESP" | jq -c -r '.promotions[]')
          for item in ${items[@]}; do
            # {"status":"COMPLETED","repository_key":"release-bundles-v2","release_bundle_name":"spring-petclinic-ga","release_bundle_version":"58","environment":"QA","service_id":"s","created_by":"token:***","created":"2024-09-21T00:53:57.326Z","created_millis":1726880037326,"xray_retrieval_status":"RECEIVED"}
            envVal=$(echo $item | jq -r '.environment')
            crtVal=$(echo $item | jq -r '.created')
            echo " - ${envVal} on ${crtVal} " >> $GITHUB_STEP_SUMMARY
          done
          echo " " >> $GITHUB_STEP_SUMMARY
