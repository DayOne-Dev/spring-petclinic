# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: JFrog Security using JF-CLI
on:
# TURN-OFF on every push 
  push:
    branches: 
      - nobuildonpush
    #  - main
    paths-ignore: # When the below folders are checked-in, the GitHub Actions job will not start.
    #  - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  securityPackage:
    if: ${{ github.event.comment.body == 'security' ||  github.event.comment.body == 'curation' || github.event.comment.body == 'audit' || github.event.comment.body == 'sast' || github.event.comment.body == 'licenses' || github.event.comment.body == 'sca' || github.event.comment.body == 'all' }}
    name: Security Package
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none 
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      RT_REPO_MVN_VIRTUAL: 'krishnam-mvn-virtual'
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: ${{vars.JFROG_CLI_LOG_LEVEL}} # DEBUG, INFO, WARN, ERROR
      BUILD_NAME: 'spring-petclinic'
      BUILD_ID: "ga-mvn-sec-${{ github.run_number }}" # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_MVN_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_MVN_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JFROG_CLI_BUILD_NAME: "${{ env.BUILD_NAME}}"
          JFROG_CLI_BUILD_NUMBER: "${{ env.BUILD_ID}}"
          JFROG_CLI_LOG_LEVEL: "${{ env.JFROG_CLI_LOG_LEVEL }}"
        with:
          version: 2.71.2
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}
          disable-auto-build-publish: ${{env.JOB_SUMMARY}}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Software version
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: Config jf with mvn repos
        run: |
          jf mvnc --global --repo-resolve-releases ${{ env.RT_REPO_MVN_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_REPO_MVN_VIRTUAL}} 

          pwd
          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic
          cd /home/runner/work/spring-petclinic/spring-petclinic

      - name: prestep-summary
        run: |
          jfcliv=`jf --version`
          echo "# :frog: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [${jfcliv}](https://jfrog.com/getcli/) and Java [${{ env.JAVA_PROVIDER }}](https://github.com/actions/setup-java) v${{ env.JAVA_VERSION }} " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY


      - name: CURATION 
        run: |
          jf ca 

# Security info: https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sast
# SAST: https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sast
# Xray: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-source-code
# The --extended-table argument returns 3 additional columns (CVSS V2, CVSS V3, ISSUE ID) alongside the standard set SEVERITY, DIRECT DEPENDENCY, DIRECT DEPENDENCY VERSION, IMPACTED DEPENDENCY NAME, IMPACTED DEPENDENCY VERSION, FIXED VERSIONS, TYPE, CVE
      - name: AUDIT - SAST
        run: |
          jf audit --mvn --sast --extended-table

      - name: AUDIT - Secrets Detection
        run: |
          jf audit --mvn --secrets --extended-table

      - name: AUDIT - Multiple Secrets types such as tokens, generic password, ssh keys, etc
        run: |
          jf audit --mvn --secrets --validate-secrets --extended-table

      - name: AUDIT - Software Composition Analysis and Contextual Analysis 
        run: |
          jf audit --mvn --sca --extended-table

      - name: AUDIT - Licenses 
        run: |
          jf audit --mvn --licenses --extended-table

      - name: AUDIT - Infrastructure as Code Vulnerabilities
        run: |
          jf audit --iac --extended-table

      - name: MVN - Create Build
        run: |
          jf mvn install -DskipTests=true --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} --detailed-summary

# Scan your Binaries: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-binaries
      - name: SCAN - Licenses
        run: |
          jf scan . --licenses --extended-table

      - name: SCAN - Vulnerabilities
        run: |
          jf scan . --vuln --extended-table

      - name: Build Publish
        run: |
          jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true
          
          sleep 20   # Sleeping for 20 seconds before executing the build publish seems to have resolved the build-scan issue. 

      - name: Query build info
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{ env.BUILD_ID}}.json"
        run: |
           jf rt curl "/api/build/${{ env.BUILD_NAME}}/${{ env.BUILD_ID}}" -o $BUILD_INFO_JSON
           cat $BUILD_INFO_JSON

      - name: Build Scan status # https://jfrog.com/help/r/xray-rest-apis/build-scan-status
        # jf xr curl /api/v1/build/status -H 'Content-Type: application/json' -d '{"name": "spring-petclinic", "number": "ga-gdl-xray-50" }'
        run: |
          jf xr curl /api/v1/build/status -H 'Content-Type: application/json' -d '{"name": "${{ env.BUILD_NAME}}", "number": "${{ env.BUILD_ID}}" }'

      - name: Build Scan
        run: |
          jf bs ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --extended-table --fail=false

      # - name: Build Scan V2  # https://jfrog.com/help/r/xray-rest-apis/scan-build-v2
      #   # jf xr curl /api/v2/ci/build -H 'Content-Type: application/json' -d '{"build_name": "spring-petclinic", "build_number": "ga-gdl-xray-50","rescan":true }'
      #   run: |
      #     jf xr curl /api/v2/ci/build -H 'Content-Type: application/json' -d '{"build_name": "${{ env.BUILD_NAME}}", "build_number": "${{ env.BUILD_ID}}", "rescan":true }'
